// <auto-generated />
using System;
using ClinicAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicAPI.Migrations
{
    [DbContext(typeof(ClinicContext))]
    partial class ClinicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicAPI.Models.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("id_patient");

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("price");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int")
                        .HasColumnName("id_professional");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int")
                        .HasColumnName("id_specialty");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_time");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PatientId = 1,
                            Price = 30.50m,
                            ProfessionalId = 1,
                            SpecialtyId = 1,
                            Status = 1,
                            Time = new DateTime(2023, 10, 6, 12, 34, 26, 396, DateTimeKind.Local).AddTicks(9811)
                        },
                        new
                        {
                            Id = 2,
                            PatientId = 2,
                            Price = 40.90m,
                            ProfessionalId = 1,
                            SpecialtyId = 1,
                            Status = 1,
                            Time = new DateTime(2023, 10, 6, 12, 34, 26, 396, DateTimeKind.Local).AddTicks(9824)
                        },
                        new
                        {
                            Id = 3,
                            PatientId = 3,
                            Price = 60.00m,
                            ProfessionalId = 2,
                            SpecialtyId = 2,
                            Status = 1,
                            Time = new DateTime(2023, 10, 6, 12, 34, 26, 396, DateTimeKind.Local).AddTicks(9825)
                        },
                        new
                        {
                            Id = 4,
                            PatientId = 3,
                            Price = 25.45m,
                            ProfessionalId = 2,
                            SpecialtyId = 1,
                            Status = 1,
                            Time = new DateTime(2023, 10, 6, 12, 34, 26, 396, DateTimeKind.Local).AddTicks(9827)
                        },
                        new
                        {
                            Id = 5,
                            PatientId = 4,
                            Price = 70.20m,
                            ProfessionalId = 2,
                            SpecialtyId = 1,
                            Status = 1,
                            Time = new DateTime(2023, 10, 6, 12, 34, 26, 396, DateTimeKind.Local).AddTicks(9828)
                        });
                });

            modelBuilder.Entity("ClinicAPI.Models.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.ToTable("patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cpf = "12345678944",
                            Email = "eva@gmail.com",
                            Name = "Eva",
                            PhoneNumber = "12346578"
                        },
                        new
                        {
                            Id = 2,
                            Cpf = "12345678955",
                            Email = "rudolf@gmail.com",
                            Name = "Rudolf",
                            PhoneNumber = "87654321"
                        },
                        new
                        {
                            Id = 3,
                            Cpf = "12345678966",
                            Email = "maria@gmail.com",
                            Name = "Maria",
                            PhoneNumber = "87421345"
                        },
                        new
                        {
                            Id = 4,
                            Cpf = "12345678922",
                            Email = "kyrie@gmail.com",
                            Name = "Kyrie",
                            PhoneNumber = "12345678"
                        });
                });

            modelBuilder.Entity("ClinicAPI.Models.Entities.Professional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("professionals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Name = "Battler"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Name = "Beatrice"
                        });
                });

            modelBuilder.Entity("ClinicAPI.Models.Entities.ProfessionalSpecialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int")
                        .HasColumnName("id_specialty");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int")
                        .HasColumnName("id_professional");

                    b.HasKey("SpecialtyId", "ProfessionalId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("professionals_specialties", (string)null);

                    b.HasData(
                        new
                        {
                            SpecialtyId = 1,
                            ProfessionalId = 1
                        },
                        new
                        {
                            SpecialtyId = 1,
                            ProfessionalId = 2
                        },
                        new
                        {
                            SpecialtyId = 2,
                            ProfessionalId = 2
                        });
                });

            modelBuilder.Entity("ClinicAPI.Models.Entities.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("specialties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Name = "Psicologia"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Name = "Pediatria"
                        });
                });

            modelBuilder.Entity("ClinicAPI.Models.Entities.Appointment", b =>
                {
                    b.HasOne("ClinicAPI.Models.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicAPI.Models.Entities.Professional", "Professional")
                        .WithMany("Appointments")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicAPI.Models.Entities.Specialty", "Specialty")
                        .WithMany("Appointments")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Professional");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("ClinicAPI.Models.Entities.ProfessionalSpecialty", b =>
                {
                    b.HasOne("ClinicAPI.Models.Entities.Professional", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicAPI.Models.Entities.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("ClinicAPI.Models.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ClinicAPI.Models.Entities.Professional", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ClinicAPI.Models.Entities.Specialty", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
